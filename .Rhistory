lgs_social_interaction = M1_Q5_f,
lgs_nature_experience = M1_Q5_g,
y = Any_Visits_14_Q6C,
num_children_16 = M3_Q1,
want_more_time_out = M3_Q8,
b_weather = M3_Q9_1,
b_physical_health = M3_Q9_2,
b_mh = M3_Q9_3,
b_disability_access = M3_Q9_4,
b_too_busy_home = M3_Q9_5,
b_too_busy_work = M3_Q9_6,
b_not_interested = M3_Q9_7,
b_leisure_preference = M3_Q9_8,
b_cost = M3_Q9_9,
b_crime = M3_Q9_10,
b_injury = M3_Q9_11,
b_lack_quality = M3_Q9_12,
b_covid = M3_Q9_13,
b_no_reason = M3_Q9_14,
b_dont_know = M3_Q9_15,
b_prefer_not_say = M3_Q9_16,
b_other = M3_Q9_Other
)
data_10 <- data_9 %>%
mutate(across(c(Wave, Region, Age_Band, Gender, Qualification, average_visits_12m, gs_change_5yrs, gs_within_walking_distance, gs_mh_wellbeing, gs_quality_attractive, gs_child_friendly, gs_physical_activity, gs_social, gs_nature_experience, lgs_walking_distance, lgs_relaxation, lgs_quality_standard, lgs_child_friendly, lgs_physical_activity, lgs_social_interaction, lgs_nature_experience, y, num_children_16, want_more_time_out, b_weather, b_physical_health, b_mh, b_disability_access, b_too_busy_home, b_too_busy_work, b_not_interested, b_leisure_preference, b_cost, b_crime, b_injury, b_lack_quality, b_covid, b_no_reason, b_dont_know, b_prefer_not_say, b_other, Marital_Status, Work_Status, Income, Ethnicity, No_Of_Vehicles, Dog, General_Health, Activity
), as.factor))
sapply(data_10,function(x) if (is.factor(x))levels(x)else NULL)
summary(data_10)
library(tidyr)
data_11 <- data_10 %>%
drop_na()
#data_12 <- data_11 %>%
# filter(if_all(c(Wave, Region, Age_Band, Gender, Qualification, average_visits_12m, gs_change_5yrs, gs_within_walking_distance, gs_mh_wellbeing, gs_quality_attractive, gs_child_friendly, gs_physical_activity, gs_social, gs_nature_experience, lgs_walking_distance, lgs_relaxation, lgs_quality_standard, lgs_child_friendly, lgs_physical_activity, lgs_social_interaction, lgs_nature_experience, y, num_children_16, want_more_time_out, b_weather, b_physical_health, b_mh, b_disability_access, b_too_busy_home, b_too_busy_work, b_not_interested, b_leisure_preference, b_cost, b_crime, b_injury, b_lack_quality, b_covid, b_no_reason, b_dont_know, b_prefer_not_say, b_other, Marital_Status, Work_Status, Income, Ethnicity, No_Of_Vehicles, Dog, General_Health, Activity
#), ~ . != "Don't know"))
#data_12 %>%
#filter(Activity == "Don’t know")
test_regression <- glm(y~., data = data_11, family = binomial)
#summary(test_regression)
unique(data_11$Wave)
unique(data_11$Wave)
library(dplyr)
data_14 <- data_11 %>%
mutate(Quarter = case_when(
Wave %in% c("Wave 2 - April 2020", "Wave 3 - May 2020", "Wave 4 - June 2020") ~ "2020_Q2",
Wave %in% c("Wave 5 - July 2020", "Wave 6 - August 2020", "Wave 7 - September 2020") ~ "2020_Q3",
Wave %in% c("Wave 8 - October 2020", "Wave 9 - November 2020", "Wave 10 - December 2020") ~ "2020_Q4",
Wave %in% c("Wave 11 - January 2021", "Wave 12 - February 2021", "Wave 13 - March 2021") ~ "2021_Q1",
Wave %in% c("Wave 14 - April 2021", "Wave 15 - May 2021", "Wave 16 - June 2021") ~ "2021_Q2",
Wave %in% c("Wave 17 - July 2021", "Wave 18 - August 2021", "Wave 19 - September 2021") ~ "2021_Q3",
Wave %in% c("Wave 20 - October 2021", "Wave 21 - November 2021", "Wave 22 - December 2021") ~ "2021_Q4",
Wave %in% c("Wave 23 - January 2022", "Wave 24 - February 2022", "Wave 25 - March 2022") ~ "2022_Q1",
Wave %in% c("Wave 26 - April 2022", "Wave 27 - May 2022", "Wave 28 - June 2022") ~ "2022_Q2",
Wave %in% c("Wave 29 - July 2022", "Wave 30 - August 2022", "Wave 31 - September 2022") ~ "2022_Q3",
Wave %in% c("Wave 32 - October 2022", "Wave 33 - November 2022", "Wave 34 - December 2022") ~ "2022_Q4",
Wave %in% c("Wave 35 - January 2023", "Wave 36 - February 2023", "Wave 37 - March 2023") ~ "2023_Q1",
Wave %in% c("Wave 38 - April 2023", "Wave 39 - May 2023", "Wave 40 - June 2023") ~ "2023_Q2",
Wave %in% c("Wave 41 - July 2023", "Wave 42 - August 2023", "Wave 43 - September 2023") ~ "2023_Q3",
Wave %in% c("Wave 44 - October 2023", "Wave 45 - November 2023", "Wave 46 - December 2023") ~ "2023_Q4",
TRUE ~ "Unknown"
))
data_14 <- data_14 %>%
mutate(Quarter = as.factor(Quarter))
data_14 <- data_14 %>%
filter(y != "Don't know",
y != "Prefer not to say") %>%
mutate(y = droplevels(y))
data_2020 <- data_14 %>%
filter(grepl("2020", Wave))
data_2020 <- data_2020 %>%
select(-Wave, -Quarter)
table(data_2020$y)
summary(data_2020)
data_2020 <- data_2020 %>%
select(-b_prefer_not_say, -b_dont_know)
test_regression <- glm(y~., data = data_2020, family = binomial)
library(car)
vif(test_regression)
# chi squared
library(rcompanion)
# Get all categorical variables
cat_vars <- names(data_2020)[sapply(data_2020, is.factor)]
# Create an empty matrix to store results
cramer_matrix <- matrix(NA, ncol = length(cat_vars), nrow = length(cat_vars),
dimnames = list(cat_vars, cat_vars))
# Compute Cramér's V for all pairs
for (i in cat_vars) {
for (j in cat_vars) {
cramer_matrix[i, j] <- cramerV(data_2020[[i]], data_2020[[j]], bias.correct = TRUE)
}
}
# Convert to dataframe for better visualization
cramer_df <- as.data.frame(cramer_matrix)
# View results
print(cramer_df)
# Define a threshold (e.g., 0.5 for strong associations)
threshold <- 0.5
# Get the row and column names where values exceed the threshold
high_correlation_indices <- which(cramer_df > threshold, arr.ind = TRUE)
# Extract corresponding row and column names
high_correlation_pairs <- data.frame(
Variable1 = rownames(cramer_df)[high_correlation_indices[, 1]],
Variable2 = colnames(cramer_df)[high_correlation_indices[, 2]],
CramerV = cramer_df[high_correlation_indices]
)
# Remove duplicates (since the matrix is symmetric)
high_correlation_pairs <- high_correlation_pairs[high_correlation_pairs$Variable1 != high_correlation_pairs$Variable2, ]
# Print the results
print(high_correlation_pairs)
#Remove Don't Knows From lgs and gs
# Define the columns you want to filter
selected_variables <- c(
"lgs_walking_distance",
"lgs_relaxation",
"lgs_quality_standard",
"lgs_child_friendly",
"lgs_physical_activity",
"lgs_social_interaction",
"lgs_nature_experience",
"gs_change_5yrs",
"gs_within_walking_distance",
"gs_mh_wellbeing",
"gs_quality_attractive",
"gs_child_friendly",
"gs_physical_activity",
"gs_social",
"gs_nature_experience"
)
# Replace with your column names
# Remove rows where any of the selected columns contain 'Don't know'
data_15 <- data_14 %>%
filter(across(all_of(selected_variables), ~ . != "Don't know"))
data_15 <- data_15 %>%
filter(across(all_of(selected_variables), ~ . != "Prefer not to say"))
data_15 <- data_15 %>%
filter(across(all_of(selected_variables), ~ . != "Don’t know"))
#Set of index
# Define the variables where the transformation applies
agreement_variables <- c(
"gs_within_walking_distance", "gs_mh_wellbeing",
"gs_quality_attractive", "gs_child_friendly", "gs_physical_activity",
"gs_social", "gs_nature_experience",
"lgs_walking_distance", "lgs_relaxation", "lgs_quality_standard",
"lgs_child_friendly", "lgs_physical_activity", "lgs_social_interaction",
"lgs_nature_experience"
)
# Define a mapping function for categorical responses
convert_to_numeric <- function(x) {
case_when(
x == "Strongly disagree" ~ 0,
x == "Disagree" ~ 1,
x == "Neither agree nor disagree" ~ 2,
x == "Agree" ~ 3,
x == "Strongly agree" ~ 4,
TRUE ~ NA_real_  # Assigns NA to unexpected values
)
}
# Apply the conversion to all relevant variables
data_16 <- data_15 %>%
mutate(across(all_of(agreement_variables), as.character)) %>%
mutate(across(all_of(agreement_variables), convert_to_numeric))
#Check for NA
na_counta <- colSums(is.na(data_16))
print(na_counta)
agreement_variables_gs <- c(
"gs_within_walking_distance", "gs_mh_wellbeing",
"gs_quality_attractive", "gs_child_friendly", "gs_physical_activity",
"gs_social", "gs_nature_experience"
)
agreement_variables_lgs <- c(
"lgs_walking_distance", "lgs_relaxation", "lgs_quality_standard",
"lgs_child_friendly", "lgs_physical_activity", "lgs_social_interaction",
"lgs_nature_experience"
)
#Create Index Variable
data_17 <- data_16 %>%
rowwise() %>%
mutate(
gs_index = sum(c_across(all_of(agreement_variables_gs)), na.rm = TRUE),  # Sum general green space scores
lgs_index = sum(c_across(all_of(agreement_variables_lgs)), na.rm = TRUE)  # Sum local green space scores
) %>%
ungroup()
#Remove all other lgs and cs columns
# Remove specific gs_* and lgs_* columns
data_18 <- data_17 %>%
select(
-gs_within_walking_distance, -gs_mh_wellbeing,
-gs_quality_attractive, -gs_child_friendly, -gs_physical_activity,
-gs_social, -gs_nature_experience,
-lgs_walking_distance, -lgs_relaxation, -lgs_quality_standard,
-lgs_child_friendly, -lgs_physical_activity, -lgs_social_interaction,
-lgs_nature_experience
)
data_19 <- data_18 %>%
select(-b_prefer_not_say, -b_dont_know, -average_visits_12m)
#new data 2020
data_2020 <- data_19 %>%
filter(grepl("2020", Wave))
data_2020 <- data_2020 %>%
select(-Wave, -Quarter)
#new glm model
test_2020_logi <- glm(y~.,data = data_2020, family = binomial)
library(car)
vif(test_2020_logi)
library(rcompanion)
cat_vars <- names(data_2020)[sapply(data_2020, is.factor)]
# Create an empty matrix to store results
cramer_matrix <- matrix(NA, ncol = length(cat_vars), nrow = length(cat_vars),
dimnames = list(cat_vars, cat_vars))
# Compute Cramér's V for all pairs
for (i in cat_vars) {
for (j in cat_vars) {
cramer_matrix[i, j] <- cramerV(data_2020[[i]], data_2020[[j]], bias.correct = TRUE)
}
}
# Convert to dataframe for better visualization
cramer_df <- as.data.frame(cramer_matrix)
# View results
print(cramer_df)
# Define a threshold (e.g., 0.5 for strong associations)
threshold <- 0.5
# Get the row and column names where values exceed the threshold
high_correlation_indices <- which(cramer_df > threshold, arr.ind = TRUE)
# Extract corresponding row and column names
high_correlation_pairs <- data.frame(
Variable1 = rownames(cramer_df)[high_correlation_indices[, 1]],
Variable2 = colnames(cramer_df)[high_correlation_indices[, 2]],
CramerV = cramer_df[high_correlation_indices]
)
# Remove duplicates (since the matrix is symmetric)
high_correlation_pairs <- high_correlation_pairs[high_correlation_pairs$Variable1 != high_correlation_pairs$Variable2, ]
# Print the results
print(high_correlation_pairs)
summary(test_2020_logi)
library(dplyr)
# removing age_band and keeping work_status only
data_19_2 <- data_19 %>%
select(-Age_Band)
cat_vars <- names(data_19_2[sapply(data_19_2, is.factor)])
summary(data_19_2)
library(dplyr)
# Identify categorical variables (factor variables only)
cat_vars <- names(data_19_2)[sapply(data_19_2, is.factor)]
# Drop empty levels in all factor columns
data_19_3 <- data_19_2 %>%
mutate(across(all_of(cat_vars), ~ droplevels(.)))
# Check if levels have been removed
summary(data_19_3)
library(dplyr)
library(stringr)
library(dplyr)
# Define levels to remove
unwanted_levels <- c("Don’t know", "Prefer not to say", "In another way (specify)")
# Identify categorical variables (factor variables only)
cat_vars <- names(data_19_3)[sapply(data_19_3, is.factor)]
# Remove rows containing unwanted levels & drop empty levels
data_20 <- data_19_3 %>%
filter(if_all(all_of(cat_vars), ~ !(. %in% unwanted_levels))) %>%  # Remove rows with unwanted levels
mutate(across(all_of(cat_vars), ~ droplevels(.)))  # Drop unused levels
# Check summary to confirm changes
summary(data_20)
# Check the distribution of levels for each categorical variable
lapply(data_20[cat_vars], table)
factor_levels <- sapply(data_20[cat_vars], levels)
print(factor_levels)
#Activity as a factor
data_21 <- data_20
data_21$Activity <- as.factor(data_21$Activity)
summary(data_21)
library(dplyr)
# Function to Set Exact Level Ordering & Baselines
set_factor_levels <- function(data) {
data <- data_20 %>%
mutate(
# Marital Status (Baseline: Married or in a civil partnership)
Marital_Status = factor(Marital_Status, levels = c(
"Married or in a civil partnership",
"Co-habiting",
"Divorced or civil partnership dissolved",
"Separated, but still legally married or in civil partnership",
"Widowed or surviving partner of civil partnership",
"Single"
)),
# Work Status (Baseline: In full-time employment)
Work_Status = factor(Work_Status, levels = c(
"In full-time employment (31+ hours per week)",
"In part-time employment (Up to 30 hours per week)",
"Self-employed",
"Not working – looking after house / children / other caring responsibilities",
"Not working – long term sick or disabled",
"Not working – retired",
"(Other)"
)),
# Ethnicity (Baseline: White)
Ethnicity = factor(Ethnicity, levels = c(
"White",
"Black or Black British",
"Asian or Asian British",
"Mixed",
"Any other ethnic group or background"
)),
# No_Of_Vehicles (Baseline: None)
No_Of_Vehicles = factor(No_Of_Vehicles, levels = c(
"None", "One", "Two", "Three", "Four or more"
)),
# General_Health (Baseline: Very good)
General_Health = factor(General_Health, levels = c(
"Very good", "Good", "Fair", "Bad", "Very bad"
)),
gs_change_5yrs = factor(gs_change_5yrs, levels = c(
"improved a lot in the last 5 years",
"improved a little in the last 5 years",
"not changed",
"reduced a little in the last 5 years",
"reduced a lot in the last 5 years"
)))
return(data)
}
# Apply the function to dataset
data_21 <- set_factor_levels(data_20)
summary(data_21)
library(dplyr)
# Merge "4, 5, 6 or more" into "4+"
data_21 <- data_21 %>%
mutate(num_children_16 = case_when(
num_children_16 %in% c("4", "5", "6 or more") ~ "4+",  # Group into "4+"
TRUE ~ as.character(num_children_16)  # Keep other values unchanged
))
# Convert back to factor to maintain categorical properties
data_21$num_children_16 <- factor(data_21$num_children_16, levels = c("0", "1", "2", "3", "4+"))
# Verify the new distribution
table(data_21$num_children_16)
#Create data sets for other years
#new data 2020
data_2020 <- data_21 %>%
filter(grepl("2020", Wave))
data_2020 <- data_2020 %>%
select(-Wave, -Quarter)
data_2021 <- data_21 %>%
filter(grepl("2021", Wave))
data_2021 <- data_2021 %>%
select(-Wave, -Quarter)
#new data 2020
data_2022 <- data_21 %>%
filter(grepl("2022", Wave))
data_2022 <- data_2022 %>%
select(-Wave, -Quarter)
#new data 2020
data_2023 <- data_21 %>%
filter(grepl("2023", Wave))
data_2023 <- data_2023 %>%
select(-Wave, -Quarter)
#full data
full_data <- data_21 %>%
select(-Wave, -Quarter)
# Install & load the package
library(stargazer)
# Export summary to a Word/HTML table
# HTML file
#stargazer(test_2020_logi, type = "text", out = "logi2020.doc")   # Word document
#stargazer(test_2021_logi, type = "text", out = "logi2021.doc")   # Word document
# HTML file
#stargazer(test_2022_logi, type = "text", out = "logi2022.doc")   # Word document
# HTML file
#stargazer(test_2023_logi, type = "text", out = "logi2023.doc")   # Word document
write.csv(data_2020, "Year_clean_data/data_2020.csv", row.names = FALSE)
write.csv(data_2021, "Year_clean_data/data_2021.csv", row.names = FALSE)
write.csv(data_2022, "Year_clean_data/data_2022.csv", row.names = FALSE)
write.csv(data_2023, "Year_clean_data/data_2023.csv", row.names = FALSE)
write.csv(full_data, "Year_clean_data/full_data.csv", row.names = FALSE)
library(dplyr)
library(ggplot2)
# Create a summary table
summary_table <- data_19 %>%
count(Age_Band, Work_Status) %>%
arrange(desc(n))  # Sort by count
# Print the table
print(summary_table)
# Create a heatmap for visualization
ggplot(summary_table, aes(x = Work_Status, y = Age_Band, fill = n)) +
geom_tile(color = "white") +
scale_fill_gradient(low = "lightblue", high = "darkblue") +
theme_minimal() +
labs(title = "Distribution of Age Band & Work Status",
x = "Work Status",
y = "Age Band",
fill = "Count") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Loading libraries
library(dplyr)
library(MASS) # For stepwise selection
# Converting outcome variable to (0,1)
data_2020$y <- factor(data_2020$y, levels = c("No visits", "Any visits"), labels = c("0", "1"))
data_2021$y <- factor(data_2021$y, levels = c("No visits", "Any visits"), labels = c("0", "1"))
data_2022$y <- factor(data_2022$y, levels = c("No visits", "Any visits"), labels = c("0", "1"))
data_2023$y <- factor(data_2023$y, levels = c("No visits", "Any visits"), labels = c("0", "1"))
# Head to see outcome
head(data_2020)
# Start with full model
base_2020 <- glm(y ~ ., data = data_2020, family = binomial)
# Run stepwise selection
stepwise_2020 <- stepAIC(base_2020, direction = "backward")
View(data_2020)
View(data_2020)
levels(data_202$Work_Status)
levels(data_2020$Work_Status)
levels(data_19$Work_Status)
data <- nature_data
library(dplyr)
data_1 <- data %>%
filter(M1 == 'Yes', M2 == 'Yes', M3 == 'Yes', M6 == 'Yes')
data_2 <- data_1 %>%
mutate(
across(
where(is.character),
~ na_if(., "")
)
) %>%
mutate(
across(
where(is.factor),
~ na_if(as.character(.), "")
)
)
library(dplyr)
data_3 <- data_2 %>%
select(where(~ !all(is.na(.))))
# Loading libraries
library(dplyr)
library(MASS) # For stepwise selection
# Head to see outcome
head(data_2020)
# Converting outcome variable to (0,1)
data_2020$y <- factor(data_2020$y, levels = c("No visits", "Any visits"), labels = c("0", "1"))
data_2021$y <- factor(data_2021$y, levels = c("No visits", "Any visits"), labels = c("0", "1"))
data_2022$y <- factor(data_2022$y, levels = c("No visits", "Any visits"), labels = c("0", "1"))
data_2023$y <- factor(data_2023$y, levels = c("No visits", "Any visits"), labels = c("0", "1"))
head(data_2020)
# Confirmation, by checking values of y match: It worked!
# Start with full model
base_2020 <- glm(y ~ ., data = data_2020, family = binomial)
summary(data_2020)
View(data_2020)
# Loading libraries
library(dplyr)
library(MASS) # For stepwise selection
# Head to see outcome
head(data_2020)
library(readr)
nature_data <- read_csv("Desktop/ST312/nature_data.csv")
View(nature_data)
data <- nature_data
library(dplyr)
data_1 <- data %>%
filter(M1 == 'Yes', M2 == 'Yes', M3 == 'Yes', M6 == 'Yes')
data_2 <- data_1 %>%
mutate(
across(
where(is.character),
~ na_if(., "")
)
) %>%
mutate(
across(
where(is.factor),
~ na_if(as.character(.), "")
)
)
library(dplyr)
data_3 <- data_2 %>%
select(where(~ !all(is.na(.))))
library(dplyr)
data_1 <- data %>%
filter(M1 == 'Yes', M2 == 'Yes', M3 == 'Yes', M6 == 'Yes')
library(dplyr)
data_3 <- data_2 %>%
select(where(~ !all(is.na(.))))
library(dplyr)
data_3 <- data_2 %>%
dplyr::select(where(~ !all(is.na(.))))
data_4 <- data_3 %>%
select(-starts_with("M2A"), -starts_with("M2B"), -Visit_Week)
data <- nature_data
library(dplyr)
data_1 <- data %>%
filter(M1 == 'Yes', M2 == 'Yes', M3 == 'Yes', M6 == 'Yes')
data_2 <- data_1 %>%
mutate(
across(
where(is.character),
~ na_if(., "")
)
) %>%
mutate(
across(
where(is.factor),
~ na_if(as.character(.), "")
)
)
data_3 <- data_2 %>%
select(where(~ !all(is.na(.))))
# Loading data
# Don't Run this box if code_1 is open to not reset levels
data_2020 <- read.csv("Year_clean_data/data_2020.csv", stringsAsFactors = TRUE)
data_2021 <- read.csv("Year_clean_data/data_2021.csv", stringsAsFactors = TRUE)
data_2022 <- read.csv("Year_clean_data/data_2022.csv", stringsAsFactors = TRUE)
data_2023 <- read.csv("Year_clean_data/data_2023.csv", stringsAsFactors = TRUE)
View(data_2020)
setwd("~/Desktop/ST310_Project")
library(ggplot2) # for all the graphs/ plots
library(tidyverse)
data <- read.csv("colorectal_cancer_dataset.csv", stringsAsFactors = TRUE)
summary(data)
